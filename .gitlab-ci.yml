stages:
- build
- upload
- cleanup

#Global variables
variables:
    QT_PATH_ANDROID: "/home/tools/Qt-OpenSource/5.12.0/android_armv7"
    ANDROID_SDK_ROOT: "/home/tools/android/android-sdk-linux"
    ANDROID_NDK_ROOT: "/home/tools/android/android-ndk-r15c"
    ANDROID_NDK_TOOLCHAIN_VERSION: "4.9"
    ANDROID_TARGET_PLATFORM: "android-23"
    JAVA_HOME: "/home/tools/jdk8"
    PROJECT_NAME: "Gaiachain"

.common: &common
  allow_failure: true
  before_script:
    - export OUT_PACKAGES_DIR="$HOME/packages/$CI_BUILD_REF"
    - mkdir -p $OUT_PACKAGES_DIR
    - git submodule sync --recursive
    - git submodule update --init --recursive
    - git submodule status --recursive

# Android
android_build:
  <<: *common
  tags:
    - LinuxAndroid
  stage: build
  variables:
    BUILD_TYPE: "debug"
    PACKAGE_NAME: "Gaiachain_$CI_COMMIT_REF_SLUG.apk"
  script:
    - cd $CI_PROJECT_DIR
    - cp -r /home/esawicki@milosolutions.com/dependencies/OpenSSL/OpenSSL $CI_PROJECT_DIR/3rdparty/OpenSSL
    - $QT_PATH_ANDROID/bin/qmake
    - cat Makefile
    - make -j3
    - make install INSTALL_ROOT=$CI_PROJECT_DIR/Gaiachain/android-build
    - cd $CI_PROJECT_DIR
    - ls -la
    - cd Gaiachain
    - ls -la
    - $QT_PATH_ANDROID/bin/androiddeployqt --output android-build --input android-lib$PROJECT_NAME.so-deployment-settings.json --android-platform $ANDROID_TARGET_PLATFORM --gradle --$BUILD_TYPE
    - cp -f android-build/build/outputs/apk/android-build-$BUILD_TYPE.apk $OUT_PACKAGES_DIR/$PACKAGE_NAME

# Linux
linux_build:
  <<: *common
  tags:
    - LinuxDesktop
  stage: build
  variables:
    QT_PATH: "/home/tools/Qt-OpenSource/5.12.0/gcc_64"
  script:
    - cd $CI_PROJECT_DIR
    - $QT_PATH/bin/qmake
    - make -j3
    - make install INSTALL_ROOT=$CI_PROJECT_DIR/build

upload_job:
  <<: *common
  tags:
    - LinuxAndroid
  stage: upload
  when: on_success
  variables:
    UPLOAD_SCRIPT: "$CI_PROJECT_DIR/milo/mscripts/seafile/upload_to_seafile.sh"
  script:
    - export BUILD_TIMESTAMP=`date +%Y-%m-%d`
    - cd $OUT_PACKAGES_DIR
    - ls -lh
    - APK_PACKAGES=*.apk
    - for PACKAGE in $APK_PACKAGES; do mv $PACKAGE "$BUILD_TIMESTAMP"_"$PACKAGE"; done
    - for PACKAGE in * ; do $UPLOAD_SCRIPT -f $PACKAGE -s $SEAFILE_SERVER -r $SEAFILE_REPO_ID -t $SEAFILE_API_TOKEN; done

cleanup:
  <<: *common
  tags:
    - LinuxDesktop
    - LinuxAndroid
  stage: cleanup
  when: always
  script:
    - ls -lh $OUT_PACKAGES_DIR
    - rm -rf $OUT_PACKAGES_DIR
